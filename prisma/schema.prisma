generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName String     
  lastName  String     
  email     String      @unique
  password  String     
  photo     String?   
  phone     String     
  address   String     
  otp       String     
  city      String     
  postCode  String     
  role      userType     @default(user)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt @default(now())
  comments  comments[]
}

model categories {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  posts     posts[]
}

model tags {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  posts     posts[]
}

model posts {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String     
  short_des  String     
  img1       String     
  img2       String     
  img3       String     
  img4       String     
  keywords   String     
  long_des   String     
  type       String     
  catID      String     @db.ObjectId
  tagID      String     @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  comments   comments[]
  categories categories @relation(fields: [catID], references: [id],onDelete: Restrict, onUpdate: Cascade)
  tags       tags       @relation(fields: [tagID], references: [id],onDelete: Restrict, onUpdate: Cascade)
}

model comments {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userID       String      @db.ObjectId
  postID       String      @db.ObjectId
  descriptions String      
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  posts        posts       @relation(fields: [postID], references: [id],onDelete: Restrict, onUpdate: Cascade)
  users        users       @relation(fields: [userID], references: [id],onDelete: Restrict, onUpdate: Cascade)
}

model socials {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String   
  youtube   String   
  twitter   String   
  linkedin  String   
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model subscribers {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model policies {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  long_des String 
  type     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

enum userType {
  admin
  user
}
